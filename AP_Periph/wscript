#!/usr/bin/env python
# encoding: utf-8

import fnmatch
import sys

try:
    import em
except ImportError:
    print("you need to install empy with 'python -m pip install empy'")
    sys.exit(1)

try:
    import pexpect
except ImportError:
    print("you need to install pexpect with 'python -m pip install pexpect'")
    sys.exit(1)
    

def build(bld):
    if bld.env.BOOTLOADER:
        return
    build_rtklib = True
    targets = ['HerePro', 'Here3+', 'Here4']
    valid_target = False
    for t in targets:
        if fnmatch.fnmatch(bld.env.BOARD, t):
            valid_target = True
        if fnmatch.fnmatch(bld.env.BOARD, 'HerePro'):
            build_rtklib = False
    if not valid_target:
        return

    bld.env.DEFINES += [
        'DRONECAN_CXX_WRAPPERS=1',
        'USE_USER_HELPERS=1',
        'CANARD_ENABLE_DEADLINE=1',
        'CANARD_MULTI_IFACE=1',
        ]
    bld.env.INCLUDES += [bld.srcnode.find_dir('../AP_Periph').abspath()]

    libraries = ['AP_Common',
                    'AP_HAL',
                    'AP_HAL_Empty',
                    'AP_Math',
                    'AP_BoardConfig',
                    'AP_BattMonitor',
                    'AP_CANManager',
                    'AP_DroneCAN',
                    'AP_Param',
                    'StorageManager',
                    'AP_FlashStorage',
                    'AP_RAMTRON',
                    'AP_GPS',
                    'AP_SerialManager',
                    'AP_RTC',
                    'AP_Compass',
                    'AP_Baro',
                    'Filter',
                    'AP_InternalError',
                    'AP_Airspeed',
                    'AP_RangeFinder',
                    'AP_ROMFS',
                    'AP_MSP',
                    'SRV_Channel',
                    'AP_Notify',
                    'AP_SerialLED',
                    'AP_Filesystem',
                    'AP_InertialSensor',
                    'AP_AccelCal',
                    'AP_Logger',
                    'AC_PID',
                    'AP_CheckFirmware',
                    ]
    bld.ap_stlib(
        name= 'AP_Periph_libs',
        ap_vehicle='AP_Periph',
        dynamic_source='modules/DroneCAN/libcanard/dsdlc_generated/src/**.c',
        ap_libraries= libraries,
        exclude_src=[
            'libraries/AP_HAL_ChibiOS/Storage.cpp'
        ]
    )

    if build_rtklib:
        bld.stlib(source=[bld.srcnode.find_node('../RTKLIB/src/rtkpos.c'),
                        bld.srcnode.find_node('../RTKLIB/src/rcv/ublox.c'),
                        bld.srcnode.find_node('../RTKLIB/src/rtcm3.c')],
                includes=[bld.srcnode.find_dir('../RTKLIB/src'),],
                defines=['INHIBIT_RTK_LOCK_MACROS', 'NO_THREADS_API'],
                # no error format
                cflags=['-Wno-error=format', '-Wno-error=unused-but-set-variable'],
                target='rtklib')

    # build external libcanard library
    bld.stlib(source=[bld.srcnode.find_node('modules/DroneCAN/libcanard/canard.c')] +
                     bld.bldnode.ant_glob('modules/DroneCAN/libcanard/dsdlc_generated/src/**.c'),
              includes=[bld.env.SRCROOT + '/modules/DroneCAN/libcanard', 
                        bld.env.BUILDROOT + '/modules/DroneCAN/libcanard/dsdlc_generated/include'],
              target='libcanard')

    bld.ap_program(
        program_name='AP_Periph',
        use=['AP_Periph_libs', 'libcanard', 'rtklib'],
        program_groups=['bin','AP_Periph'],
        includes=[bld.env.SRCROOT + '/modules/DroneCAN/libcanard',
                  bld.env.BUILDROOT + '/modules/DroneCAN/libcanard/dsdlc_generated/include']
    )
